import { Color } from "./Color";
import { Matrix4 } from "./Matrix4";
export declare class Vector4 {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    static fromElements: (x: number, y: number, z: number, w: number, result: Vector4) => Vector4;
    static fromColor: (color: Color, result: Vector4) => Vector4;
    static clone: (v4: Vector4 | Vector4, result: Vector4) => undefined | Vector4;
    static packedLength: number;
    static magnitudeSquared: (v4: Vector4) => number;
    static magnitude: (v4: Vector4) => number;
    setLength: (length: number, result?: Vector4 | undefined) => Vector4;
    static distance: (left: Vector4, right: Vector4) => number;
    static distanceSquared: (left: Vector4, right: Vector4) => number;
    static add: (left: Vector4, right: Vector4, result?: Vector4 | undefined) => Vector4;
    add: (right: Vector4) => Vector4;
    static subtract: (left: Vector4, right: Vector4, result: Vector4) => Vector4;
    static min: (left: Vector4, right: Vector4, result?: Vector4 | undefined) => Vector4;
    static minFromArray: (array: Array<Vector4>, result?: Vector4 | undefined) => Vector4;
    static max: (left: Vector4, right: Vector4, result?: Vector4 | undefined) => Vector4;
    static maxFromArray: (array: Array<Vector4>, result?: Vector4 | undefined) => Vector4;
    applyMatrix4(m: Matrix4): this;
    clamp: (min: Vector4, max: Vector4) => this;
    clampScalar: (minVal: number, maxVal: number) => this;
    clampLength: (min: number, max: number) => Vector4;
    floor: () => this;
    ceil: () => this;
    round: () => this;
    static normalize: (v4: Vector4, result: Vector4) => Vector4;
    normalize: (result?: Vector4 | undefined) => Vector4 | undefined;
    static dot: (left: Vector4, right: Vector4) => number;
    static multiplyComponents: (left: Vector4, right: Vector4, result: Vector4) => Vector4;
    static divideComponents: (left: Vector4, right: Vector4, result: Vector4) => Vector4;
    static multiplyByScalar: (v4: Vector4, scalar: number, result?: Vector4 | undefined) => Vector4 | undefined;
    static divideByScalar: (v4: Vector4, scalar: number, result: Vector4) => Vector4;
    static negate: (v4: Vector4, result: Vector4) => Vector4;
    static abs: (v4: Vector4, result: Vector4) => Vector4;
    static lerp: (start: Vector4, end: Vector4, t: number, result?: Vector4 | undefined) => Vector4;
    static equals: (left: Vector4, right: Vector4) => boolean;
    static ZERO: Readonly<Vector4>;
    static ONE: Readonly<Vector4>;
    static UNIT_X: Readonly<Vector4>;
    static UNIT_Y: Readonly<Vector4>;
    static UNIT_Z: Readonly<Vector4>;
    static UNIT_W: Readonly<Vector4>;
    clone: (result: Vector4) => Vector4 | undefined;
    equals: (right: Vector4) => boolean;
    fromArray: (array: Array<number>, offset?: number) => this;
    toArray: (offset?: number, result?: number[] | undefined) => number[];
    static random: (result?: Vector4 | undefined) => Vector4;
    length: () => number;
    toString: () => string;
}
//# sourceMappingURL=Vector4.d.ts.map